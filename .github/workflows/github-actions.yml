name: CI/CD Pipeline for AWS Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: mesh
          POSTGRES_PASSWORD: password
          POSTGRES_DB: deskdot
        options: >-
          --health-cmd "pg_isready -U mesh"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js
      - uses: actions/setup-node@v1
        with:
          node-version: 18

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install

      # Step 4: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U mesh && break
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      # Step 5: Apply test database SQL
      - name: Apply test database SQL
        env:
          PGPASSWORD: password
        run: |
          psql -h localhost -U mesh -d deskdot -f ./scripts/test_db.sql

      # Step 6: Run tests with Jest
      - name: Run Jest tests
        env:
          DATABASE_URL: postgresql://mesh:password@localhost:5432/deskdot
          TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          PORT: ${{ secrets.PORT }}
        run: |
          npm test

      # Step 7: Build the application
      - name: Generate build
        run: |
          npm run build

      # Step 8: Deploy to AWS EC2 using rsync
      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Deploy app to EC2
        run: |
          rsync -avz --exclude "node_modules" --exclude ".git" --exclude "configuration" -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/deskdotServer

      # Step 9: Restart the app using systemd
      - name: Restart systemd service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo systemctl restart deskdot.service
